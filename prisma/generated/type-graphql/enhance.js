"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Country: crudResolvers.CountryCrudResolver,
    Location: crudResolvers.LocationCrudResolver,
    Session: crudResolvers.SessionCrudResolver,
    Account: crudResolvers.AccountCrudResolver,
    Pages: crudResolvers.PagesCrudResolver,
    Role: crudResolvers.RoleCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Profile: crudResolvers.ProfileCrudResolver,
    Hotel: crudResolvers.HotelCrudResolver,
    Post: crudResolvers.PostCrudResolver,
    Comment: crudResolvers.CommentCrudResolver
};
const actionResolversMap = {
    Country: {
        country: actionResolvers.FindUniqueCountryResolver,
        findFirstCountry: actionResolvers.FindFirstCountryResolver,
        countries: actionResolvers.FindManyCountryResolver,
        createCountry: actionResolvers.CreateCountryResolver,
        createManyCountry: actionResolvers.CreateManyCountryResolver,
        deleteCountry: actionResolvers.DeleteCountryResolver,
        updateCountry: actionResolvers.UpdateCountryResolver,
        deleteManyCountry: actionResolvers.DeleteManyCountryResolver,
        updateManyCountry: actionResolvers.UpdateManyCountryResolver,
        upsertCountry: actionResolvers.UpsertCountryResolver,
        aggregateCountry: actionResolvers.AggregateCountryResolver,
        groupByCountry: actionResolvers.GroupByCountryResolver
    },
    Location: {
        location: actionResolvers.FindUniqueLocationResolver,
        findFirstLocation: actionResolvers.FindFirstLocationResolver,
        locations: actionResolvers.FindManyLocationResolver,
        createLocation: actionResolvers.CreateLocationResolver,
        createManyLocation: actionResolvers.CreateManyLocationResolver,
        deleteLocation: actionResolvers.DeleteLocationResolver,
        updateLocation: actionResolvers.UpdateLocationResolver,
        deleteManyLocation: actionResolvers.DeleteManyLocationResolver,
        updateManyLocation: actionResolvers.UpdateManyLocationResolver,
        upsertLocation: actionResolvers.UpsertLocationResolver,
        aggregateLocation: actionResolvers.AggregateLocationResolver,
        groupByLocation: actionResolvers.GroupByLocationResolver
    },
    Session: {
        session: actionResolvers.FindUniqueSessionResolver,
        findFirstSession: actionResolvers.FindFirstSessionResolver,
        sessions: actionResolvers.FindManySessionResolver,
        createSession: actionResolvers.CreateSessionResolver,
        createManySession: actionResolvers.CreateManySessionResolver,
        deleteSession: actionResolvers.DeleteSessionResolver,
        updateSession: actionResolvers.UpdateSessionResolver,
        deleteManySession: actionResolvers.DeleteManySessionResolver,
        updateManySession: actionResolvers.UpdateManySessionResolver,
        upsertSession: actionResolvers.UpsertSessionResolver,
        aggregateSession: actionResolvers.AggregateSessionResolver,
        groupBySession: actionResolvers.GroupBySessionResolver
    },
    Account: {
        account: actionResolvers.FindUniqueAccountResolver,
        findFirstAccount: actionResolvers.FindFirstAccountResolver,
        accounts: actionResolvers.FindManyAccountResolver,
        createAccount: actionResolvers.CreateAccountResolver,
        createManyAccount: actionResolvers.CreateManyAccountResolver,
        deleteAccount: actionResolvers.DeleteAccountResolver,
        updateAccount: actionResolvers.UpdateAccountResolver,
        deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
        updateManyAccount: actionResolvers.UpdateManyAccountResolver,
        upsertAccount: actionResolvers.UpsertAccountResolver,
        aggregateAccount: actionResolvers.AggregateAccountResolver,
        groupByAccount: actionResolvers.GroupByAccountResolver
    },
    Pages: {
        findUniquePages: actionResolvers.FindUniquePagesResolver,
        findFirstPages: actionResolvers.FindFirstPagesResolver,
        findManyPages: actionResolvers.FindManyPagesResolver,
        createPages: actionResolvers.CreatePagesResolver,
        createManyPages: actionResolvers.CreateManyPagesResolver,
        deletePages: actionResolvers.DeletePagesResolver,
        updatePages: actionResolvers.UpdatePagesResolver,
        deleteManyPages: actionResolvers.DeleteManyPagesResolver,
        updateManyPages: actionResolvers.UpdateManyPagesResolver,
        upsertPages: actionResolvers.UpsertPagesResolver,
        aggregatePages: actionResolvers.AggregatePagesResolver,
        groupByPages: actionResolvers.GroupByPagesResolver
    },
    Role: {
        role: actionResolvers.FindUniqueRoleResolver,
        findFirstRole: actionResolvers.FindFirstRoleResolver,
        roles: actionResolvers.FindManyRoleResolver,
        createRole: actionResolvers.CreateRoleResolver,
        createManyRole: actionResolvers.CreateManyRoleResolver,
        deleteRole: actionResolvers.DeleteRoleResolver,
        updateRole: actionResolvers.UpdateRoleResolver,
        deleteManyRole: actionResolvers.DeleteManyRoleResolver,
        updateManyRole: actionResolvers.UpdateManyRoleResolver,
        upsertRole: actionResolvers.UpsertRoleResolver,
        aggregateRole: actionResolvers.AggregateRoleResolver,
        groupByRole: actionResolvers.GroupByRoleResolver
    },
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Profile: {
        profile: actionResolvers.FindUniqueProfileResolver,
        findFirstProfile: actionResolvers.FindFirstProfileResolver,
        profiles: actionResolvers.FindManyProfileResolver,
        createProfile: actionResolvers.CreateProfileResolver,
        createManyProfile: actionResolvers.CreateManyProfileResolver,
        deleteProfile: actionResolvers.DeleteProfileResolver,
        updateProfile: actionResolvers.UpdateProfileResolver,
        deleteManyProfile: actionResolvers.DeleteManyProfileResolver,
        updateManyProfile: actionResolvers.UpdateManyProfileResolver,
        upsertProfile: actionResolvers.UpsertProfileResolver,
        aggregateProfile: actionResolvers.AggregateProfileResolver,
        groupByProfile: actionResolvers.GroupByProfileResolver
    },
    Hotel: {
        hotel: actionResolvers.FindUniqueHotelResolver,
        findFirstHotel: actionResolvers.FindFirstHotelResolver,
        hotels: actionResolvers.FindManyHotelResolver,
        createHotel: actionResolvers.CreateHotelResolver,
        createManyHotel: actionResolvers.CreateManyHotelResolver,
        deleteHotel: actionResolvers.DeleteHotelResolver,
        updateHotel: actionResolvers.UpdateHotelResolver,
        deleteManyHotel: actionResolvers.DeleteManyHotelResolver,
        updateManyHotel: actionResolvers.UpdateManyHotelResolver,
        upsertHotel: actionResolvers.UpsertHotelResolver,
        aggregateHotel: actionResolvers.AggregateHotelResolver,
        groupByHotel: actionResolvers.GroupByHotelResolver
    },
    Post: {
        post: actionResolvers.FindUniquePostResolver,
        findFirstPost: actionResolvers.FindFirstPostResolver,
        posts: actionResolvers.FindManyPostResolver,
        createPost: actionResolvers.CreatePostResolver,
        createManyPost: actionResolvers.CreateManyPostResolver,
        deletePost: actionResolvers.DeletePostResolver,
        updatePost: actionResolvers.UpdatePostResolver,
        deleteManyPost: actionResolvers.DeleteManyPostResolver,
        updateManyPost: actionResolvers.UpdateManyPostResolver,
        upsertPost: actionResolvers.UpsertPostResolver,
        aggregatePost: actionResolvers.AggregatePostResolver,
        groupByPost: actionResolvers.GroupByPostResolver
    },
    Comment: {
        comment: actionResolvers.FindUniqueCommentResolver,
        findFirstComment: actionResolvers.FindFirstCommentResolver,
        comments: actionResolvers.FindManyCommentResolver,
        createComment: actionResolvers.CreateCommentResolver,
        createManyComment: actionResolvers.CreateManyCommentResolver,
        deleteComment: actionResolvers.DeleteCommentResolver,
        updateComment: actionResolvers.UpdateCommentResolver,
        deleteManyComment: actionResolvers.DeleteManyCommentResolver,
        updateManyComment: actionResolvers.UpdateManyCommentResolver,
        upsertComment: actionResolvers.UpsertCommentResolver,
        aggregateComment: actionResolvers.AggregateCommentResolver,
        groupByComment: actionResolvers.GroupByCommentResolver
    }
};
const crudResolversInfo = {
    Country: ["country", "findFirstCountry", "countries", "createCountry", "createManyCountry", "deleteCountry", "updateCountry", "deleteManyCountry", "updateManyCountry", "upsertCountry", "aggregateCountry", "groupByCountry"],
    Location: ["location", "findFirstLocation", "locations", "createLocation", "createManyLocation", "deleteLocation", "updateLocation", "deleteManyLocation", "updateManyLocation", "upsertLocation", "aggregateLocation", "groupByLocation"],
    Session: ["session", "findFirstSession", "sessions", "createSession", "createManySession", "deleteSession", "updateSession", "deleteManySession", "updateManySession", "upsertSession", "aggregateSession", "groupBySession"],
    Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
    Pages: ["findUniquePages", "findFirstPages", "findManyPages", "createPages", "createManyPages", "deletePages", "updatePages", "deleteManyPages", "updateManyPages", "upsertPages", "aggregatePages", "groupByPages"],
    Role: ["role", "findFirstRole", "roles", "createRole", "createManyRole", "deleteRole", "updateRole", "deleteManyRole", "updateManyRole", "upsertRole", "aggregateRole", "groupByRole"],
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Profile: ["profile", "findFirstProfile", "profiles", "createProfile", "createManyProfile", "deleteProfile", "updateProfile", "deleteManyProfile", "updateManyProfile", "upsertProfile", "aggregateProfile", "groupByProfile"],
    Hotel: ["hotel", "findFirstHotel", "hotels", "createHotel", "createManyHotel", "deleteHotel", "updateHotel", "deleteManyHotel", "updateManyHotel", "upsertHotel", "aggregateHotel", "groupByHotel"],
    Post: ["post", "findFirstPost", "posts", "createPost", "createManyPost", "deletePost", "updatePost", "deleteManyPost", "updateManyPost", "upsertPost", "aggregatePost", "groupByPost"],
    Comment: ["comment", "findFirstComment", "comments", "createComment", "createManyComment", "deleteComment", "updateComment", "deleteManyComment", "updateManyComment", "upsertComment", "aggregateComment", "groupByComment"]
};
const argsInfo = {
    FindUniqueCountryArgs: ["where"],
    FindFirstCountryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCountryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCountryArgs: ["data"],
    CreateManyCountryArgs: ["data", "skipDuplicates"],
    DeleteCountryArgs: ["where"],
    UpdateCountryArgs: ["data", "where"],
    DeleteManyCountryArgs: ["where"],
    UpdateManyCountryArgs: ["data", "where"],
    UpsertCountryArgs: ["where", "create", "update"],
    AggregateCountryArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCountryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLocationArgs: ["where"],
    FindFirstLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLocationArgs: ["data"],
    CreateManyLocationArgs: ["data", "skipDuplicates"],
    DeleteLocationArgs: ["where"],
    UpdateLocationArgs: ["data", "where"],
    DeleteManyLocationArgs: ["where"],
    UpdateManyLocationArgs: ["data", "where"],
    UpsertLocationArgs: ["where", "create", "update"],
    AggregateLocationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLocationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSessionArgs: ["where"],
    FindFirstSessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSessionArgs: ["data"],
    CreateManySessionArgs: ["data", "skipDuplicates"],
    DeleteSessionArgs: ["where"],
    UpdateSessionArgs: ["data", "where"],
    DeleteManySessionArgs: ["where"],
    UpdateManySessionArgs: ["data", "where"],
    UpsertSessionArgs: ["where", "create", "update"],
    AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAccountArgs: ["where"],
    FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAccountArgs: ["data"],
    CreateManyAccountArgs: ["data", "skipDuplicates"],
    DeleteAccountArgs: ["where"],
    UpdateAccountArgs: ["data", "where"],
    DeleteManyAccountArgs: ["where"],
    UpdateManyAccountArgs: ["data", "where"],
    UpsertAccountArgs: ["where", "create", "update"],
    AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePagesArgs: ["where"],
    FindFirstPagesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPagesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePagesArgs: ["data"],
    CreateManyPagesArgs: ["data", "skipDuplicates"],
    DeletePagesArgs: ["where"],
    UpdatePagesArgs: ["data", "where"],
    DeleteManyPagesArgs: ["where"],
    UpdateManyPagesArgs: ["data", "where"],
    UpsertPagesArgs: ["where", "create", "update"],
    AggregatePagesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPagesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueRoleArgs: ["where"],
    FindFirstRoleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyRoleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateRoleArgs: ["data"],
    CreateManyRoleArgs: ["data", "skipDuplicates"],
    DeleteRoleArgs: ["where"],
    UpdateRoleArgs: ["data", "where"],
    DeleteManyRoleArgs: ["where"],
    UpdateManyRoleArgs: ["data", "where"],
    UpsertRoleArgs: ["where", "create", "update"],
    AggregateRoleArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByRoleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueProfileArgs: ["where"],
    FindFirstProfileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProfileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateProfileArgs: ["data"],
    CreateManyProfileArgs: ["data", "skipDuplicates"],
    DeleteProfileArgs: ["where"],
    UpdateProfileArgs: ["data", "where"],
    DeleteManyProfileArgs: ["where"],
    UpdateManyProfileArgs: ["data", "where"],
    UpsertProfileArgs: ["where", "create", "update"],
    AggregateProfileArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByProfileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueHotelArgs: ["where"],
    FindFirstHotelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyHotelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateHotelArgs: ["data"],
    CreateManyHotelArgs: ["data", "skipDuplicates"],
    DeleteHotelArgs: ["where"],
    UpdateHotelArgs: ["data", "where"],
    DeleteManyHotelArgs: ["where"],
    UpdateManyHotelArgs: ["data", "where"],
    UpsertHotelArgs: ["where", "create", "update"],
    AggregateHotelArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByHotelArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePostArgs: ["where"],
    FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePostArgs: ["data"],
    CreateManyPostArgs: ["data", "skipDuplicates"],
    DeletePostArgs: ["where"],
    UpdatePostArgs: ["data", "where"],
    DeleteManyPostArgs: ["where"],
    UpdateManyPostArgs: ["data", "where"],
    UpsertPostArgs: ["where", "create", "update"],
    AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentArgs: ["where"],
    FindFirstCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentArgs: ["data"],
    CreateManyCommentArgs: ["data", "skipDuplicates"],
    DeleteCommentArgs: ["where"],
    UpdateCommentArgs: ["data", "where"],
    DeleteManyCommentArgs: ["where"],
    UpdateManyCommentArgs: ["data", "where"],
    UpsertCommentArgs: ["where", "create", "update"],
    AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Country: relationResolvers.CountryRelationsResolver,
    Location: relationResolvers.LocationRelationsResolver,
    Session: relationResolvers.SessionRelationsResolver,
    Account: relationResolvers.AccountRelationsResolver,
    Pages: relationResolvers.PagesRelationsResolver,
    Role: relationResolvers.RoleRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Profile: relationResolvers.ProfileRelationsResolver,
    Hotel: relationResolvers.HotelRelationsResolver,
    Post: relationResolvers.PostRelationsResolver,
    Comment: relationResolvers.CommentRelationsResolver
};
const relationResolversInfo = {
    Country: ["profiles", "locations"],
    Location: ["posts", "country"],
    Session: ["user"],
    Account: ["user"],
    Pages: ["roles"],
    Role: ["users", "pages"],
    User: ["role", "profile", "sessions", "accounts", "posts", "comments"],
    Profile: ["user", "country"],
    Hotel: ["posts"],
    Post: ["author", "location", "hotel", "comments"],
    Comment: ["user", "post"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Country: ["id", "name", "created_at", "updated_at"],
    Location: ["id", "name", "countryId", "created_at", "updated_at"],
    Session: ["id", "expires", "sessionToken", "userId"],
    Account: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    Pages: ["id", "name", "path", "created_at", "updated_at"],
    Role: ["id", "name"],
    User: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    Profile: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    Hotel: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    Post: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    Comment: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateCountry: ["_count", "_min", "_max"],
    CountryGroupBy: ["id", "name", "created_at", "updated_at", "_count", "_min", "_max"],
    AggregateLocation: ["_count", "_min", "_max"],
    LocationGroupBy: ["id", "name", "countryId", "created_at", "updated_at", "_count", "_min", "_max"],
    AggregateSession: ["_count", "_min", "_max"],
    SessionGroupBy: ["id", "expires", "sessionToken", "userId", "_count", "_min", "_max"],
    AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
    AccountGroupBy: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_sum", "_min", "_max"],
    AggregatePages: ["_count", "_min", "_max"],
    PagesGroupBy: ["id", "name", "path", "created_at", "updated_at", "_count", "_min", "_max"],
    AggregateRole: ["_count", "_min", "_max"],
    RoleGroupBy: ["id", "name", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at", "_count", "_min", "_max"],
    AggregateProfile: ["_count", "_min", "_max"],
    ProfileGroupBy: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at", "_count", "_min", "_max"],
    AggregateHotel: ["_count", "_avg", "_sum", "_min", "_max"],
    HotelGroupBy: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at", "_count", "_avg", "_sum", "_min", "_max"],
    AggregatePost: ["_count", "_avg", "_sum", "_min", "_max"],
    PostGroupBy: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComment: ["_count", "_avg", "_sum", "_min", "_max"],
    CommentGroupBy: ["id", "userId", "postId", "description", "score", "created_at", "updated_at", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    CountryCount: ["profiles", "locations"],
    CountryCountAggregate: ["id", "name", "created_at", "updated_at", "_all"],
    CountryMinAggregate: ["id", "name", "created_at", "updated_at"],
    CountryMaxAggregate: ["id", "name", "created_at", "updated_at"],
    LocationCount: ["posts"],
    LocationCountAggregate: ["id", "name", "countryId", "created_at", "updated_at", "_all"],
    LocationMinAggregate: ["id", "name", "countryId", "created_at", "updated_at"],
    LocationMaxAggregate: ["id", "name", "countryId", "created_at", "updated_at"],
    SessionCountAggregate: ["id", "expires", "sessionToken", "userId", "_all"],
    SessionMinAggregate: ["id", "expires", "sessionToken", "userId"],
    SessionMaxAggregate: ["id", "expires", "sessionToken", "userId"],
    AccountCountAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_all"],
    AccountAvgAggregate: ["expires_at"],
    AccountSumAggregate: ["expires_at"],
    AccountMinAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMaxAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PagesCount: ["roles"],
    PagesCountAggregate: ["id", "name", "path", "created_at", "updated_at", "_all"],
    PagesMinAggregate: ["id", "name", "path", "created_at", "updated_at"],
    PagesMaxAggregate: ["id", "name", "path", "created_at", "updated_at"],
    RoleCount: ["users", "pages"],
    RoleCountAggregate: ["id", "name", "_all"],
    RoleMinAggregate: ["id", "name"],
    RoleMaxAggregate: ["id", "name"],
    UserCount: ["sessions", "accounts", "posts", "comments"],
    UserCountAggregate: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at", "_all"],
    UserMinAggregate: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    UserMaxAggregate: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    ProfileCountAggregate: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at", "_all"],
    ProfileMinAggregate: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    ProfileMaxAggregate: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    HotelCount: ["posts"],
    HotelCountAggregate: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at", "_all"],
    HotelAvgAggregate: ["price_per_night"],
    HotelSumAggregate: ["price_per_night"],
    HotelMinAggregate: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelMaxAggregate: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    PostCount: ["comments"],
    PostCountAggregate: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at", "_all"],
    PostAvgAggregate: ["average_score"],
    PostSumAggregate: ["average_score"],
    PostMinAggregate: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostMaxAggregate: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    CommentCountAggregate: ["id", "userId", "postId", "description", "score", "created_at", "updated_at", "_all"],
    CommentAvgAggregate: ["score"],
    CommentSumAggregate: ["score"],
    CommentMinAggregate: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CommentMaxAggregate: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    CountryWhereInput: ["AND", "OR", "NOT", "id", "name", "profiles", "locations", "created_at", "updated_at"],
    CountryOrderByWithRelationInput: ["id", "name", "profiles", "locations", "created_at", "updated_at"],
    CountryWhereUniqueInput: ["id"],
    CountryOrderByWithAggregationInput: ["id", "name", "created_at", "updated_at", "_count", "_max", "_min"],
    CountryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "created_at", "updated_at"],
    LocationWhereInput: ["AND", "OR", "NOT", "id", "name", "countryId", "posts", "country", "created_at", "updated_at"],
    LocationOrderByWithRelationInput: ["id", "name", "countryId", "posts", "country", "created_at", "updated_at"],
    LocationWhereUniqueInput: ["id"],
    LocationOrderByWithAggregationInput: ["id", "name", "countryId", "created_at", "updated_at", "_count", "_max", "_min"],
    LocationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "countryId", "created_at", "updated_at"],
    SessionWhereInput: ["AND", "OR", "NOT", "id", "expires", "sessionToken", "userId", "user"],
    SessionOrderByWithRelationInput: ["id", "expires", "sessionToken", "userId", "user"],
    SessionWhereUniqueInput: ["id"],
    SessionOrderByWithAggregationInput: ["id", "expires", "sessionToken", "userId", "_count", "_max", "_min"],
    SessionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "expires", "sessionToken", "userId"],
    AccountWhereInput: ["AND", "OR", "NOT", "id", "userId", "user", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountOrderByWithRelationInput: ["id", "userId", "user", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountWhereUniqueInput: ["id"],
    AccountOrderByWithAggregationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_max", "_min", "_sum"],
    AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PagesWhereInput: ["AND", "OR", "NOT", "id", "name", "path", "roles", "created_at", "updated_at"],
    PagesOrderByWithRelationInput: ["id", "name", "path", "roles", "created_at", "updated_at"],
    PagesWhereUniqueInput: ["id"],
    PagesOrderByWithAggregationInput: ["id", "name", "path", "created_at", "updated_at", "_count", "_max", "_min"],
    PagesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "path", "created_at", "updated_at"],
    RoleWhereInput: ["AND", "OR", "NOT", "id", "name", "users", "pages"],
    RoleOrderByWithRelationInput: ["id", "name", "users", "pages"],
    RoleWhereUniqueInput: ["id"],
    RoleOrderByWithAggregationInput: ["id", "name", "_count", "_max", "_min"],
    RoleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "role", "roleId", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserOrderByWithRelationInput: ["id", "name", "email", "emailVerified", "role", "roleId", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    ProfileWhereInput: ["AND", "OR", "NOT", "id", "phone", "address", "image", "gender", "countryId", "userId", "user", "country", "created_at", "updated_at"],
    ProfileOrderByWithRelationInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "user", "country", "created_at", "updated_at"],
    ProfileWhereUniqueInput: ["id", "userId"],
    ProfileOrderByWithAggregationInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at", "_count", "_max", "_min"],
    ProfileScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    HotelWhereInput: ["AND", "OR", "NOT", "id", "name", "price_per_night", "lunch_included", "image", "posts", "created_at", "updated_at"],
    HotelOrderByWithRelationInput: ["id", "name", "price_per_night", "lunch_included", "image", "posts", "created_at", "updated_at"],
    HotelWhereUniqueInput: ["id"],
    HotelOrderByWithAggregationInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at", "_count", "_avg", "_max", "_min", "_sum"],
    HotelScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    PostWhereInput: ["AND", "OR", "NOT", "id", "userId", "author", "locationId", "location", "biome", "hotelId", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostOrderByWithRelationInput: ["id", "userId", "author", "locationId", "location", "biome", "hotelId", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostWhereUniqueInput: ["id"],
    PostOrderByWithAggregationInput: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at", "_count", "_avg", "_max", "_min", "_sum"],
    PostScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    CommentWhereInput: ["AND", "OR", "NOT", "id", "userId", "user", "postId", "post", "description", "score", "created_at", "updated_at"],
    CommentOrderByWithRelationInput: ["id", "userId", "user", "postId", "post", "description", "score", "created_at", "updated_at"],
    CommentWhereUniqueInput: ["id"],
    CommentOrderByWithAggregationInput: ["id", "userId", "postId", "description", "score", "created_at", "updated_at", "_count", "_avg", "_max", "_min", "_sum"],
    CommentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CountryCreateInput: ["id", "name", "profiles", "locations", "created_at", "updated_at"],
    CountryUpdateInput: ["id", "name", "profiles", "locations", "created_at", "updated_at"],
    CountryCreateManyInput: ["id", "name", "created_at", "updated_at"],
    CountryUpdateManyMutationInput: ["id", "name", "created_at", "updated_at"],
    LocationCreateInput: ["id", "name", "posts", "country", "created_at", "updated_at"],
    LocationUpdateInput: ["id", "name", "posts", "country", "created_at", "updated_at"],
    LocationCreateManyInput: ["id", "name", "countryId", "created_at", "updated_at"],
    LocationUpdateManyMutationInput: ["id", "name", "created_at", "updated_at"],
    SessionCreateInput: ["id", "expires", "sessionToken", "user"],
    SessionUpdateInput: ["id", "expires", "sessionToken", "user"],
    SessionCreateManyInput: ["id", "expires", "sessionToken", "userId"],
    SessionUpdateManyMutationInput: ["id", "expires", "sessionToken"],
    AccountCreateInput: ["id", "user", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountUpdateInput: ["id", "user", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountCreateManyInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountUpdateManyMutationInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PagesCreateInput: ["id", "name", "path", "roles", "created_at", "updated_at"],
    PagesUpdateInput: ["id", "name", "path", "roles", "created_at", "updated_at"],
    PagesCreateManyInput: ["id", "name", "path", "created_at", "updated_at"],
    PagesUpdateManyMutationInput: ["id", "name", "path", "created_at", "updated_at"],
    RoleCreateInput: ["id", "name", "users", "pages"],
    RoleUpdateInput: ["id", "name", "users", "pages"],
    RoleCreateManyInput: ["id", "name"],
    RoleUpdateManyMutationInput: ["id", "name"],
    UserCreateInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserUpdateInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserCreateManyInput: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    UserUpdateManyMutationInput: ["id", "name", "email", "emailVerified", "created_at", "updated_at"],
    ProfileCreateInput: ["id", "phone", "address", "image", "gender", "user", "country", "created_at", "updated_at"],
    ProfileUpdateInput: ["id", "phone", "address", "image", "gender", "user", "country", "created_at", "updated_at"],
    ProfileCreateManyInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    ProfileUpdateManyMutationInput: ["id", "phone", "address", "image", "gender", "created_at", "updated_at"],
    HotelCreateInput: ["id", "name", "price_per_night", "lunch_included", "image", "posts", "created_at", "updated_at"],
    HotelUpdateInput: ["id", "name", "price_per_night", "lunch_included", "image", "posts", "created_at", "updated_at"],
    HotelCreateManyInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelUpdateManyMutationInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    PostCreateInput: ["id", "author", "location", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostUpdateInput: ["id", "author", "location", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostCreateManyInput: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostUpdateManyMutationInput: ["id", "biome", "title", "description", "image", "average_score", "created_at", "updated_at"],
    CommentCreateInput: ["id", "user", "post", "description", "score", "created_at", "updated_at"],
    CommentUpdateInput: ["id", "user", "post", "description", "score", "created_at", "updated_at"],
    CommentCreateManyInput: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CommentUpdateManyMutationInput: ["id", "description", "score", "created_at", "updated_at"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    ProfileListRelationFilter: ["every", "some", "none"],
    LocationListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    ProfileOrderByRelationAggregateInput: ["_count"],
    LocationOrderByRelationAggregateInput: ["_count"],
    CountryCountOrderByAggregateInput: ["id", "name", "created_at", "updated_at"],
    CountryMaxOrderByAggregateInput: ["id", "name", "created_at", "updated_at"],
    CountryMinOrderByAggregateInput: ["id", "name", "created_at", "updated_at"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    PostListRelationFilter: ["every", "some", "none"],
    CountryRelationFilter: ["is", "isNot"],
    PostOrderByRelationAggregateInput: ["_count"],
    LocationCountOrderByAggregateInput: ["id", "name", "countryId", "created_at", "updated_at"],
    LocationMaxOrderByAggregateInput: ["id", "name", "countryId", "created_at", "updated_at"],
    LocationMinOrderByAggregateInput: ["id", "name", "countryId", "created_at", "updated_at"],
    UserRelationFilter: ["is", "isNot"],
    SessionCountOrderByAggregateInput: ["id", "expires", "sessionToken", "userId"],
    SessionMaxOrderByAggregateInput: ["id", "expires", "sessionToken", "userId"],
    SessionMinOrderByAggregateInput: ["id", "expires", "sessionToken", "userId"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AccountCountOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountAvgOrderByAggregateInput: ["expires_at"],
    AccountMaxOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMinOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountSumOrderByAggregateInput: ["expires_at"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    RoleListRelationFilter: ["every", "some", "none"],
    RoleOrderByRelationAggregateInput: ["_count"],
    PagesCountOrderByAggregateInput: ["id", "name", "path", "created_at", "updated_at"],
    PagesMaxOrderByAggregateInput: ["id", "name", "path", "created_at", "updated_at"],
    PagesMinOrderByAggregateInput: ["id", "name", "path", "created_at", "updated_at"],
    UserListRelationFilter: ["every", "some", "none"],
    PagesListRelationFilter: ["every", "some", "none"],
    UserOrderByRelationAggregateInput: ["_count"],
    PagesOrderByRelationAggregateInput: ["_count"],
    RoleCountOrderByAggregateInput: ["id", "name"],
    RoleMaxOrderByAggregateInput: ["id", "name"],
    RoleMinOrderByAggregateInput: ["id", "name"],
    RoleRelationFilter: ["is", "isNot"],
    ProfileRelationFilter: ["is", "isNot"],
    SessionListRelationFilter: ["every", "some", "none"],
    AccountListRelationFilter: ["every", "some", "none"],
    CommentListRelationFilter: ["every", "some", "none"],
    SessionOrderByRelationAggregateInput: ["_count"],
    AccountOrderByRelationAggregateInput: ["_count"],
    CommentOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    ProfileCountOrderByAggregateInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    ProfileMaxOrderByAggregateInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    ProfileMinOrderByAggregateInput: ["id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    BoolFilter: ["equals", "not"],
    HotelCountOrderByAggregateInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelAvgOrderByAggregateInput: ["price_per_night"],
    HotelMaxOrderByAggregateInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelMinOrderByAggregateInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelSumOrderByAggregateInput: ["price_per_night"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    LocationRelationFilter: ["is", "isNot"],
    EnumBiomeFilter: ["equals", "in", "notIn", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    HotelRelationFilter: ["is", "isNot"],
    PostCountOrderByAggregateInput: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostAvgOrderByAggregateInput: ["average_score"],
    PostMaxOrderByAggregateInput: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostMinOrderByAggregateInput: ["id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostSumOrderByAggregateInput: ["average_score"],
    EnumBiomeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    PostRelationFilter: ["is", "isNot"],
    CommentCountOrderByAggregateInput: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CommentAvgOrderByAggregateInput: ["score"],
    CommentMaxOrderByAggregateInput: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CommentMinOrderByAggregateInput: ["id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    CommentSumOrderByAggregateInput: ["score"],
    ProfileCreateNestedManyWithoutCountryInput: ["create", "connectOrCreate", "createMany", "connect"],
    LocationCreateNestedManyWithoutCountryInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    ProfileUpdateManyWithoutCountryInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LocationUpdateManyWithoutCountryInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    PostCreateNestedManyWithoutLocationInput: ["create", "connectOrCreate", "createMany", "connect"],
    CountryCreateNestedOneWithoutLocationsInput: ["create", "connectOrCreate", "connect"],
    PostUpdateManyWithoutLocationInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CountryUpdateOneRequiredWithoutLocationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutSessionsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutSessionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    RoleCreateNestedManyWithoutPagesInput: ["create", "connectOrCreate", "connect"],
    RoleUpdateManyWithoutPagesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedManyWithoutRoleInput: ["create", "connectOrCreate", "createMany", "connect"],
    PagesCreateNestedManyWithoutRolesInput: ["create", "connectOrCreate", "connect"],
    UserUpdateManyWithoutRoleInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PagesUpdateManyWithoutRolesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    RoleCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
    ProfileCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    SessionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    RoleUpdateOneRequiredWithoutUsersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ProfileUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SessionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    AccountUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutProfileInput: ["create", "connectOrCreate", "connect"],
    CountryCreateNestedOneWithoutProfilesInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutProfileInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CountryUpdateOneRequiredWithoutProfilesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PostCreateNestedManyWithoutHotelInput: ["create", "connectOrCreate", "createMany", "connect"],
    BoolFieldUpdateOperationsInput: ["set"],
    PostUpdateManyWithoutHotelInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    LocationCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    HotelCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneRequiredWithoutPostsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    LocationUpdateOneRequiredWithoutPostsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumBiomeFieldUpdateOperationsInput: ["set"],
    HotelUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    PostCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PostUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedEnumBiomeFilter: ["equals", "in", "notIn", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedEnumBiomeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    ProfileCreateWithoutCountryInput: ["id", "phone", "address", "image", "gender", "user", "created_at", "updated_at"],
    ProfileCreateOrConnectWithoutCountryInput: ["where", "create"],
    ProfileCreateManyCountryInputEnvelope: ["data", "skipDuplicates"],
    LocationCreateWithoutCountryInput: ["id", "name", "posts", "created_at", "updated_at"],
    LocationCreateOrConnectWithoutCountryInput: ["where", "create"],
    LocationCreateManyCountryInputEnvelope: ["data", "skipDuplicates"],
    ProfileUpsertWithWhereUniqueWithoutCountryInput: ["where", "update", "create"],
    ProfileUpdateWithWhereUniqueWithoutCountryInput: ["where", "data"],
    ProfileUpdateManyWithWhereWithoutCountryInput: ["where", "data"],
    ProfileScalarWhereInput: ["AND", "OR", "NOT", "id", "phone", "address", "image", "gender", "countryId", "userId", "created_at", "updated_at"],
    LocationUpsertWithWhereUniqueWithoutCountryInput: ["where", "update", "create"],
    LocationUpdateWithWhereUniqueWithoutCountryInput: ["where", "data"],
    LocationUpdateManyWithWhereWithoutCountryInput: ["where", "data"],
    LocationScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "countryId", "created_at", "updated_at"],
    PostCreateWithoutLocationInput: ["id", "author", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostCreateOrConnectWithoutLocationInput: ["where", "create"],
    PostCreateManyLocationInputEnvelope: ["data", "skipDuplicates"],
    CountryCreateWithoutLocationsInput: ["id", "name", "profiles", "created_at", "updated_at"],
    CountryCreateOrConnectWithoutLocationsInput: ["where", "create"],
    PostUpsertWithWhereUniqueWithoutLocationInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutLocationInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutLocationInput: ["where", "data"],
    PostScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    CountryUpsertWithoutLocationsInput: ["update", "create"],
    CountryUpdateWithoutLocationsInput: ["id", "name", "profiles", "created_at", "updated_at"],
    UserCreateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "role", "profile", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
    UserUpsertWithoutSessionsInput: ["update", "create"],
    UserUpdateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "role", "profile", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserCreateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "posts", "comments", "created_at", "updated_at"],
    UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
    UserUpsertWithoutAccountsInput: ["update", "create"],
    UserUpdateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "posts", "comments", "created_at", "updated_at"],
    RoleCreateWithoutPagesInput: ["id", "name", "users"],
    RoleCreateOrConnectWithoutPagesInput: ["where", "create"],
    RoleUpsertWithWhereUniqueWithoutPagesInput: ["where", "update", "create"],
    RoleUpdateWithWhereUniqueWithoutPagesInput: ["where", "data"],
    RoleUpdateManyWithWhereWithoutPagesInput: ["where", "data"],
    RoleScalarWhereInput: ["AND", "OR", "NOT", "id", "name"],
    UserCreateWithoutRoleInput: ["id", "name", "email", "emailVerified", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserCreateOrConnectWithoutRoleInput: ["where", "create"],
    UserCreateManyRoleInputEnvelope: ["data", "skipDuplicates"],
    PagesCreateWithoutRolesInput: ["id", "name", "path", "created_at", "updated_at"],
    PagesCreateOrConnectWithoutRolesInput: ["where", "create"],
    UserUpsertWithWhereUniqueWithoutRoleInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutRoleInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutRoleInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "roleId", "created_at", "updated_at"],
    PagesUpsertWithWhereUniqueWithoutRolesInput: ["where", "update", "create"],
    PagesUpdateWithWhereUniqueWithoutRolesInput: ["where", "data"],
    PagesUpdateManyWithWhereWithoutRolesInput: ["where", "data"],
    PagesScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "path", "created_at", "updated_at"],
    RoleCreateWithoutUsersInput: ["id", "name", "pages"],
    RoleCreateOrConnectWithoutUsersInput: ["where", "create"],
    ProfileCreateWithoutUserInput: ["id", "phone", "address", "image", "gender", "country", "created_at", "updated_at"],
    ProfileCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateWithoutUserInput: ["id", "expires", "sessionToken"],
    SessionCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    AccountCreateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    PostCreateWithoutAuthorInput: ["id", "location", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostCreateOrConnectWithoutAuthorInput: ["where", "create"],
    PostCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
    CommentCreateWithoutUserInput: ["id", "post", "description", "score", "created_at", "updated_at"],
    CommentCreateOrConnectWithoutUserInput: ["where", "create"],
    CommentCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    RoleUpsertWithoutUsersInput: ["update", "create"],
    RoleUpdateWithoutUsersInput: ["id", "name", "pages"],
    ProfileUpsertWithoutUserInput: ["update", "create"],
    ProfileUpdateWithoutUserInput: ["id", "phone", "address", "image", "gender", "country", "created_at", "updated_at"],
    SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SessionScalarWhereInput: ["AND", "OR", "NOT", "id", "expires", "sessionToken", "userId"],
    AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PostUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    CommentUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    CommentScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "postId", "description", "score", "created_at", "updated_at"],
    UserCreateWithoutProfileInput: ["id", "name", "email", "emailVerified", "role", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    UserCreateOrConnectWithoutProfileInput: ["where", "create"],
    CountryCreateWithoutProfilesInput: ["id", "name", "locations", "created_at", "updated_at"],
    CountryCreateOrConnectWithoutProfilesInput: ["where", "create"],
    UserUpsertWithoutProfileInput: ["update", "create"],
    UserUpdateWithoutProfileInput: ["id", "name", "email", "emailVerified", "role", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    CountryUpsertWithoutProfilesInput: ["update", "create"],
    CountryUpdateWithoutProfilesInput: ["id", "name", "locations", "created_at", "updated_at"],
    PostCreateWithoutHotelInput: ["id", "author", "location", "biome", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    PostCreateOrConnectWithoutHotelInput: ["where", "create"],
    PostCreateManyHotelInputEnvelope: ["data", "skipDuplicates"],
    PostUpsertWithWhereUniqueWithoutHotelInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutHotelInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutHotelInput: ["where", "data"],
    UserCreateWithoutPostsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "comments", "created_at", "updated_at"],
    UserCreateOrConnectWithoutPostsInput: ["where", "create"],
    LocationCreateWithoutPostsInput: ["id", "name", "country", "created_at", "updated_at"],
    LocationCreateOrConnectWithoutPostsInput: ["where", "create"],
    HotelCreateWithoutPostsInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    HotelCreateOrConnectWithoutPostsInput: ["where", "create"],
    CommentCreateWithoutPostInput: ["id", "user", "description", "score", "created_at", "updated_at"],
    CommentCreateOrConnectWithoutPostInput: ["where", "create"],
    CommentCreateManyPostInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutPostsInput: ["update", "create"],
    UserUpdateWithoutPostsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "comments", "created_at", "updated_at"],
    LocationUpsertWithoutPostsInput: ["update", "create"],
    LocationUpdateWithoutPostsInput: ["id", "name", "country", "created_at", "updated_at"],
    HotelUpsertWithoutPostsInput: ["update", "create"],
    HotelUpdateWithoutPostsInput: ["id", "name", "price_per_night", "lunch_included", "image", "created_at", "updated_at"],
    CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    UserCreateWithoutCommentsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "posts", "created_at", "updated_at"],
    UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
    PostCreateWithoutCommentsInput: ["id", "author", "location", "biome", "hotel", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserUpsertWithoutCommentsInput: ["update", "create"],
    UserUpdateWithoutCommentsInput: ["id", "name", "email", "emailVerified", "role", "profile", "sessions", "accounts", "posts", "created_at", "updated_at"],
    PostUpsertWithoutCommentsInput: ["update", "create"],
    PostUpdateWithoutCommentsInput: ["id", "author", "location", "biome", "hotel", "title", "description", "image", "average_score", "created_at", "updated_at"],
    ProfileCreateManyCountryInput: ["id", "phone", "address", "image", "gender", "userId", "created_at", "updated_at"],
    LocationCreateManyCountryInput: ["id", "name", "created_at", "updated_at"],
    ProfileUpdateWithoutCountryInput: ["id", "phone", "address", "image", "gender", "user", "created_at", "updated_at"],
    LocationUpdateWithoutCountryInput: ["id", "name", "posts", "created_at", "updated_at"],
    PostCreateManyLocationInput: ["id", "userId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostUpdateWithoutLocationInput: ["id", "author", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    RoleUpdateWithoutPagesInput: ["id", "name", "users"],
    UserCreateManyRoleInput: ["id", "name", "email", "emailVerified", "created_at", "updated_at"],
    UserUpdateWithoutRoleInput: ["id", "name", "email", "emailVerified", "profile", "sessions", "accounts", "posts", "comments", "created_at", "updated_at"],
    PagesUpdateWithoutRolesInput: ["id", "name", "path", "created_at", "updated_at"],
    SessionCreateManyUserInput: ["id", "expires", "sessionToken"],
    AccountCreateManyUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PostCreateManyAuthorInput: ["id", "locationId", "biome", "hotelId", "title", "description", "image", "average_score", "created_at", "updated_at"],
    CommentCreateManyUserInput: ["id", "postId", "description", "score", "created_at", "updated_at"],
    SessionUpdateWithoutUserInput: ["id", "expires", "sessionToken"],
    AccountUpdateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    PostUpdateWithoutAuthorInput: ["id", "location", "biome", "hotel", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    CommentUpdateWithoutUserInput: ["id", "post", "description", "score", "created_at", "updated_at"],
    PostCreateManyHotelInput: ["id", "userId", "locationId", "biome", "title", "description", "image", "average_score", "created_at", "updated_at"],
    PostUpdateWithoutHotelInput: ["id", "author", "location", "biome", "title", "description", "image", "average_score", "comments", "created_at", "updated_at"],
    CommentCreateManyPostInput: ["id", "userId", "description", "score", "created_at", "updated_at"],
    CommentUpdateWithoutPostInput: ["id", "user", "description", "score", "created_at", "updated_at"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
