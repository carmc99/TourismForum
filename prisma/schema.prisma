// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Country {
  id String @id @default(cuid())
  name String
  profiles Profile[]
  locations Location[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Location {
  id String @id @default(cuid())
  name String
  countryId String
  posts Post[]
  country Country @relation(fields: [countryId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Pages {
  id String @id @default(cuid())
  name String
  path String
  roles Role[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Role {
  id String @id @default(cuid())
  name String
  users User[]
  pages Pages[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role Role? @relation(fields: [roleId], references: [id])
  roleId String?
  accounts      Account[]
  sessions      Session[]
  profile Profile?
  posts Post[]
  comments Comment[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("users")
}

model Profile {
  id String @id @default(cuid())
  phone String
  address String
  image String
  gender String
  countryId String
  userId String
  user User @relation(fields: [userId], references: [id])
  country Country @relation(fields: [countryId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Hotel {
  id String @id @default(cuid())
  name String
  price_per_night Int
  lunch_included Boolean
  image String
  posts Post[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Biome {
  TUNDRA
  BOSQUE
  PRADERA
  CHAPARRAL
  DESIERTO
  TAIGA
  ESTEPA
  SELVA_TROPICAL
  SABANA
  MANGLAR
}

model Post {
  id String @id @default(cuid())
  userId String
  author User @relation(fields: [userId], references: [id])
  locationId String
  location Location @relation(fields: [locationId], references: [id])
  biome Biome
  hotelId String?
  hotel Hotel? @relation(fields: [hotelId], references: [id])
  title String
  description String
  image String
  average_score Int
  comments Comment[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Comment {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  postId String
  post Post @relation(fields: [postId], references: [id])
  description String
  score Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}